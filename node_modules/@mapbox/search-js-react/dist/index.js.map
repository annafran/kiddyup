{
  "version": 3,
  "sources": ["../src/index.ts", "../src/components/AddressAutofill.tsx", "../src/components/SearchBox.tsx", "../src/components/AddressMinimap.tsx", "../src/hooks/useEvented.tsx", "../src/hooks/useMapboxAutofill.tsx", "../src/hooks/useMapboxSearch.tsx", "../src/hooks/useSearchSession.tsx", "../src/hooks/useConfirmAddress.tsx"],
  "sourcesContent": ["import '@mapbox/search-js-web';\nexport { config } from '@mapbox/search-js-web';\n\nexport { AddressAutofill } from './components/AddressAutofill';\nexport { SearchBox } from './components/SearchBox';\nexport { AddressMinimap } from './components/AddressMinimap';\n\nexport { useEvented } from './hooks/useEvented';\nexport { useMapboxAutofill } from './hooks/useMapboxAutofill';\nexport { useMapboxSearch } from './hooks/useMapboxSearch';\nexport { useSearchSession } from './hooks/useSearchSession';\nexport { useConfirmAddress } from './hooks/useConfirmAddress';\n", "/* eslint-disable @typescript-eslint/no-namespace */\n\nimport React, { useRef, useEffect, useImperativeHandle } from 'react';\n\nimport {\n  AutofillOptions,\n  AutofillSuggestionResponse,\n  AutofillRetrieveResponse\n} from '@mapbox/search-js-core';\nimport {\n  MapboxAddressAutofill,\n  Theme,\n  MapboxHTMLEvent,\n  AddressConfirmOptions,\n  PopoverOptions\n} from '@mapbox/search-js-web';\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      'mapbox-address-autofill': any;\n    }\n  }\n}\n\n/**\n * @typedef AddressAutofillRefType\n */\nexport interface AddressAutofillRefType {\n  /**\n   * @see {@link MapboxAddressAutofill#focus}\n   */\n  focus: typeof MapboxAddressAutofill.prototype.focus;\n}\n\n/**\n * @typedef AddressAutofillProps\n */\nexport interface AddressAutofillProps {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n  /**\n   * Options to pass to the underlying {@link MapboxAutofill} interface.\n   * @example\n   * ```typescript\n   * <AddressAutofill options={{\n   *  language: 'en',\n   *  country: 'US',\n   * }}>\n   * ```\n   */\n  options?: Partial<AutofillOptions>;\n  /**\n   * The {@link Theme} to use for styling the autofill and confirmation dialog\n   * components.\n   * @example\n   * ```typescript\n   * <AddressAutofill theme={{\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * }}>\n   * ```\n   */\n  theme?: Theme;\n  /**\n   * The {@link PopoverOptions} to define popover positioning.\n   * @example\n   * ```typescript\n   * <AddressAutofill popoverOptions={{\n   *   placement: 'top-start',\n   *   flip: true,\n   *   offset: 5\n   * }}>\n   * ```\n   */\n  popoverOptions?: Partial<PopoverOptions>;\n  /**\n   * If true, forms autofilled by the browser will prompt the\n   * {@link confirmAddress} dialog for user confirmation.\n   * An {@link AddressConfirmOptions} object can also be passed\n   * to prompt {@link confirmAddress} with custom options.\n   * Defaults to false.\n   * @example\n   * ```typescript\n   * <AddressAutofill confirmOnBrowserAutofill={{\n   *   minimap: true,\n   *   skipConfirmModal: (feature) =>\n   *     ['exact', 'high'].includes(\n   *       feature.properties.match_code.confidence\n   *     )\n   * }}>\n   * ```\n   */\n  confirmOnBrowserAutofill?: boolean | AddressConfirmOptions;\n\n  /**\n   * Children to render inside the autofill component. This **must** include\n   * an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text) element\n   * with either autocomplete type `\"street-address\"` or `\"address-line1\"`.\n   */\n  children: React.ReactChild;\n\n  /**\n   * Fired when the user is typing in the input and provides a list of suggestions.\n   * The underlying response from {@link MapboxAutofill} is passed.\n   */\n  onSuggest?: (res: AutofillSuggestionResponse) => void;\n  /**\n   * Fired when {@link MapboxAutofill} has errored providing a list of suggestions.\n   * The underlying error is passed.\n   */\n  onSuggestError?: (error: Error) => void;\n  /**\n   * Fired when the user has selected a suggestion, before the form is autofilled.\n   * The underlying response from {@link MapboxAutofill} is passed.\n   */\n  onRetrieve?: (res: AutofillRetrieveResponse) => void;\n}\n\n/**\n * `<AddressAutofill>` is a React component that wraps an address\n * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text) element with intelligent, location-aware autocomplete functionality.\n *\n * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).\n *\n * This component must be a descendant of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form), and the form\n * must have inputs with proper HTML `autocomplete` attributes. If your application works with browser autofill, you may already have\n * this functionality.\n * - [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n * - [Autofill](https://web.dev/learn/forms/autofill/)\n *\n * Internally, this wraps the [`<mapbox-address-autofill>`](https://docs.mapbox.com/mapbox-search-js/api/web/autofill/#mapboxaddressautofill) element.\n *\n * @function AddressAutofill\n * @param {AddressAutofillProps} props\n * @example\n * ```typescript\n * export function Component() {\n *   const [value, setValue] = React.useState('');\n *   return (\n *     <form>\n *       <AddressAutofill accessToken={<your access token here>}>\n *         <input\n *           autoComplete=\"shipping address-line1\"\n *           value={value}\n *           onChange={(e) => setValue(e.target.value)}\n *         />\n *       </AddressAutofill>\n *     </form>\n *   );\n * }\n * ```\n */\nexport const AddressAutofill = React.forwardRef(\n  (props: AddressAutofillProps, refProp): React.ReactElement => {\n    const {\n      accessToken,\n      options,\n      theme,\n      popoverOptions,\n      confirmOnBrowserAutofill,\n      children,\n      onSuggest,\n      onSuggestError,\n      onRetrieve\n    } = props;\n    const ref = useRef<MapboxAddressAutofill>();\n\n    useImperativeHandle(refProp, () => ({\n      focus: () => {\n        if (ref.current) return ref.current.focus();\n        throw new Error('AddressAutofill is not mounted');\n      }\n    }));\n\n    // Update options.\n    useEffect(() => {\n      if (ref.current) ref.current.options = options;\n    }, [ref.current, options]);\n\n    // Update theme.\n    useEffect(() => {\n      if (ref.current) ref.current.theme = theme;\n    }, [ref.current, theme]);\n\n    // Update popoverOptions\n    useEffect(() => {\n      if (ref.current) ref.current.popoverOptions = popoverOptions;\n    }, [ref.current, popoverOptions]);\n\n    // Update confirmOnBrowserAutofill\n    useEffect(() => {\n      if (ref.current)\n        ref.current.confirmOnBrowserAutofill = confirmOnBrowserAutofill;\n    }, [ref.current, confirmOnBrowserAutofill]);\n\n    // Update onSuggest.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      if (!onSuggest) return;\n\n      const fn = (e: MapboxHTMLEvent<AutofillSuggestionResponse>) =>\n        onSuggest(e.detail);\n\n      node.addEventListener('suggest', fn);\n      return () => {\n        node.removeEventListener('suggest', fn);\n      };\n    }, [ref.current, onSuggest]);\n\n    // Update onSuggestError.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      if (!onSuggestError) return;\n\n      const fn = (e: MapboxHTMLEvent<Error>) => onSuggestError(e.detail);\n\n      node.addEventListener('suggesterror', fn);\n      return () => {\n        node.removeEventListener('suggesterror', fn);\n      };\n    }, [ref.current, onSuggestError]);\n\n    // Update onRetrieve.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      if (!onRetrieve) return;\n\n      const fn = (e: MapboxHTMLEvent<AutofillRetrieveResponse>) =>\n        onRetrieve(e.detail);\n\n      node.addEventListener('retrieve', fn);\n      return () => {\n        node.removeEventListener('retrieve', fn);\n      };\n    }, [ref.current, onRetrieve]);\n\n    // Update accessToken.\n    useEffect(() => {\n      if (ref.current) ref.current.accessToken = accessToken;\n    }, [ref.current, accessToken]);\n\n    return (\n      <mapbox-address-autofill ref={ref}>{children}</mapbox-address-autofill>\n    );\n  }\n);\n", "/* eslint-disable @typescript-eslint/no-namespace */\n\nimport React, { useRef, useEffect, useImperativeHandle } from 'react';\n\nimport {\n  Options,\n  SuggestionResponse,\n  RetrieveResponse\n} from '@mapbox/search-js-core';\nimport {\n  MapboxSearchBox,\n  Theme,\n  MapboxHTMLEvent,\n  PopoverOptions\n} from '@mapbox/search-js-web';\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      'mapbox-search-box': any;\n    }\n  }\n}\n\n/**\n * @typedef SearchBoxRefType\n */\nexport interface SearchBoxRefType {\n  /**\n   * @see {@link MapboxSearchBox#focus}\n   */\n  focus: typeof MapboxSearchBox.prototype.focus;\n}\n\n/**\n * @typedef SearchBoxProps\n */\nexport interface SearchBoxProps {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n  /**\n   * Options to pass to the underlying {@link MapboxSearch} interface.\n   * @example\n   * ```typescript\n   * <SearchBox options={{\n   *  language: 'en',\n   *  country: 'US',\n   * }}>\n   * ```\n   */\n  options?: Partial<Options>;\n  /**\n   * The {@link Theme} to use for styling the search box.\n   * @example\n   * ```typescript\n   * <SearchBox theme={{\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * }}>\n   * ```\n   */\n  theme?: Theme;\n  /**\n   * The {@link PopoverOptions} to define popover positioning.\n   * @example\n   * ```typescript\n   * <SearchBox popoverOptions={{\n   *   placement: 'top-start',\n   *   flip: true,\n   *   offset: 5\n   * }}>\n   * ```\n   */\n  popoverOptions?: Partial<PopoverOptions>;\n\n  /**\n   * If specified, the map will be centered on the retrieved suggestion.\n   */\n  map?: mapboxgl.Map;\n\n  /**\n   * Value to display in the search box.\n   */\n  value?: string;\n  /**\n   * Callback for when the value changes.\n   */\n  onChange?: (value: string) => void;\n\n  /**\n   * Fired when the user is typing in the input and provides a list of suggestions.\n   * The underlying response from {@link MapboxSearch} is passed.\n   */\n  onSuggest: (res: SuggestionResponse) => void;\n  /**\n   * Fired when {@link MapboxSearch} has errored providing a list of suggestions.\n   * The underlying error is passed.\n   */\n  onSuggestError: (error: Error) => void;\n  /**\n   * Fired when the user has selected a suggestion.\n   * The underlying response from {@link MapboxSearch} is passed.\n   */\n  onRetrieve: (res: RetrieveResponse) => void;\n}\n\n/**\n * `<SearchBox>` is a React component that provides an interactive search box,\n * powered by the Mapbox Search API.\n *\n * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).\n *\n * Internally, this wraps the [`<mapbox-search-box>`](https://docs.mapbox.com/mapbox-search-js/api/web/search/#mapboxsearchbox) element.\n *\n * @function SearchBox\n * @param {SearchBoxProps} props\n * @example\n * ```typescript\n * export function Component() {\n *   const [value, setValue] = React.useState('');\n *   return (\n *     <form>\n *       <SearchBox accessToken={<your access token here>} />\n *     </form>\n *   );\n * }\n * ```\n */\nexport const SearchBox = React.forwardRef(\n  (props: SearchBoxProps, refProp): React.ReactElement => {\n    const {\n      accessToken,\n      options,\n      theme,\n      popoverOptions,\n      map,\n      value,\n      onChange,\n      onSuggest,\n      onSuggestError,\n      onRetrieve\n    } = props;\n    const ref = useRef<MapboxSearchBox>();\n\n    useImperativeHandle(refProp, () => ({\n      focus: () => {\n        if (ref.current) return ref.current.focus();\n        throw new Error('SearchBox is not mounted');\n      }\n    }));\n\n    // Update options.\n    useEffect(() => {\n      if (ref.current) ref.current.options = options;\n    }, [ref.current, options]);\n\n    // Update theme.\n    useEffect(() => {\n      if (ref.current) ref.current.theme = theme;\n    }, [ref.current, theme]);\n\n    // Update popoverOptions\n    useEffect(() => {\n      if (ref.current) ref.current.popoverOptions = popoverOptions;\n    }, [ref.current, popoverOptions]);\n\n    // Update value.\n    useEffect(() => {\n      if (ref.current) ref.current.value = value;\n    }, [ref.current, value]);\n\n    // Update map.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      node.bindMap(map);\n      return () => {\n        node.unbindMap();\n      };\n    }, [ref.current, map]);\n\n    // Update onSuggest.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      const fn = (e: MapboxHTMLEvent<SuggestionResponse>) =>\n        onSuggest(e.detail);\n\n      node.addEventListener('suggest', fn);\n      return () => {\n        node.removeEventListener('suggest', fn);\n      };\n    }, [ref.current, onSuggest]);\n\n    // Update onSuggestError.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      const fn = (e: MapboxHTMLEvent<Error>) => onSuggestError(e.detail);\n\n      node.addEventListener('suggesterror', fn);\n      return () => {\n        node.removeEventListener('suggesterror', fn);\n      };\n    }, [ref.current, onSuggestError]);\n\n    // Update onRetrieve.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      const fn = (e: MapboxHTMLEvent<RetrieveResponse>) => onRetrieve(e.detail);\n\n      node.addEventListener('retrieve', fn);\n      return () => {\n        node.removeEventListener('retrieve', fn);\n      };\n    }, [ref.current, onRetrieve]);\n\n    // Update onChange.\n    useEffect(() => {\n      const node = ref.current;\n      if (!node) return;\n\n      const fn = (e: MapboxHTMLEvent<string>) => onChange(e.detail);\n\n      node.addEventListener('input', fn);\n      return () => {\n        node.removeEventListener('input', fn);\n      };\n    }, [ref.current, onChange]);\n\n    // Update accessToken.\n    useEffect(() => {\n      if (ref.current) ref.current.accessToken = accessToken;\n    }, [ref.current, accessToken]);\n\n    return <mapbox-search-box ref={ref} />;\n  }\n);\n", "/* eslint-disable @typescript-eslint/no-namespace */\n\nimport React, { useRef, useEffect } from 'react';\n\nimport {\n  Anchor,\n  MapboxAddressMinimap,\n  MapStyleMode,\n  Theme\n} from '@mapbox/search-js-web';\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      'mapbox-address-minimap': any;\n    }\n  }\n}\n\n/**\n * @typedef AddressMinimapProps\n */\nexport interface AddressMinimapProps {\n  /**\n   * If `true`, the marker can be moved around the map. Defaults to `false`.\n   *\n   * When editable, the marker can be moved around the map and the updated\n   * location can be referenced from the {@link AddressMinimapProps#onSaveMarkerLocation} callback.\n   */\n  canAdjustMarker?: boolean;\n  /**\n   * If `true`, the map when panned moves around the marker, keeping the marker\n   * centered. Defaults to `false`.\n   */\n  keepMarkerCentered?: boolean;\n  /**\n   * The anchor of the marker, relative to center of the expanded size. Defaults to `'bottom'`.\n   */\n  markerAnchor?: Anchor;\n  /**\n   * A client-defined callback that is triggered when the \"Save\" button is clicked in the editing interface,\n   * and gives access to the adjusted marker coordinate.\n   */\n  onSaveMarkerLocation?: (coordinate: [number, number]) => void;\n\n  /**\n   * Must be `true` for the minimap to be shown, in addition to {@link AddressMinimapProps#feature}\n   * being present.\n   */\n  show?: boolean;\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   *\n   * If not explicitly set on the component, this will reference the value in the global config object.\n   */\n  accessToken?: string;\n  /**\n   * A [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) Feature representing\n   * a [Point](https://geojson.org/geojson-spec.html#point) geometry.\n   *\n   * The minimap is hidden unless {@link AddressMinimapProps#feature} is truthy.\n   */\n  feature?: GeoJSON.Feature<GeoJSON.Point>;\n\n  /**\n   * If `true`, the map will have an image toggle between Map and Satellite styles.\n   */\n  satelliteToggle?: boolean;\n  /**\n   * The {@link Theme} to use for styling interface buttons.\n   * @example\n   * ```typescript\n   * <AddressMinimap theme={{\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * }}>\n   * ```\n   */\n  theme?: Theme;\n  /**\n   * The map style to use, either `'default'` or `'satellite'`. The default map\n   * style is configurable with {@link AddressMinimapProps#defaultMapStyle}.\n   */\n  mapStyleMode?: MapStyleMode;\n  /**\n   * The map style to use for the default map style. Defaults to `['mapbox', 'streets-v11']`.\n   */\n  defaultMapStyle?: [string, string];\n  /**\n   * Custom footer text appearing below the map, when marker adjustment is enabled.\n   * If `true` or left undefined, the default footer text will be used.\n   * If `false`, the footer will not be shown.\n   */\n  footer?: boolean | string;\n}\n\n/**\n * `AddressMinimap` is a React component that displays a marker for confirmation purposes.\n *\n * Optionally, this marker is editable. When editable, the marker can be moved\n * around the map and the updated location is sent back to the Mapbox Contribute\n * workflow.\n *\n * The goal of `AddressMinimap` is to reduce delivery or geolocation error in shipping and\n * local dispatching contexts.\n *\n * `AddressMinimap` expands to fill its container, and is hidden unless\n * {@link AddressMinimapProps#feature} and {@link AddressMinimapProps#show} are truthy.\n *\n * Internally, this wraps the [`<mapbox-address-minimap>`](https://docs.mapbox.com/mapbox-search-js/api/web/minimap/#mapboxaddressminimap) element.\n *\n * @class AddressMinimap\n * @param {AddressMinimapProps} props\n * @example\n * ```typescript\n * export function Component() {\n *   return (\n *     <AddressMinimap accessToken={<your access token here>}>\n *     </AddressMinimap>\n *   );\n * }\n * ```\n */\nexport function AddressMinimap(props: AddressMinimapProps): React.ReactElement {\n  const {\n    canAdjustMarker = false,\n    keepMarkerCentered = false,\n    markerAnchor = 'bottom',\n    onSaveMarkerLocation,\n\n    show = false,\n    accessToken,\n    feature = null,\n\n    satelliteToggle = false,\n    theme,\n    mapStyleMode = 'default',\n    defaultMapStyle = ['mapbox', 'streets-v11'],\n    footer\n  } = props;\n  const ref = useRef<MapboxAddressMinimap>();\n\n  // Update show.\n  useEffect(() => {\n    if (!ref.current) return;\n    if (show) {\n      ref.current.show();\n    } else {\n      ref.current.hide();\n    }\n  }, [ref.current, show]);\n\n  // Update theme.\n  useEffect(() => {\n    if (ref.current) ref.current.theme = theme;\n  }, [ref.current, theme]);\n\n  // Update feature.\n  useEffect(() => {\n    if (ref.current) ref.current.feature = show ? feature : null;\n  }, [ref.current, feature, show]);\n\n  // Update mapStyleMode.\n  useEffect(() => {\n    if (ref.current) ref.current.mapStyleMode = mapStyleMode;\n  }, [ref.current, mapStyleMode]);\n\n  // Update defaultMapStyle.\n  useEffect(() => {\n    if (ref.current) ref.current.defaultMapStyle = defaultMapStyle;\n  }, [ref.current, defaultMapStyle]);\n\n  // Update footer.\n  useEffect(() => {\n    if (footer === undefined) return;\n    if (ref.current) ref.current.footer = footer;\n  }, [ref.current, footer]);\n\n  // Update accessToken.\n  useEffect(() => {\n    if (ref.current) ref.current.accessToken = accessToken;\n  }, [ref.current, accessToken]);\n\n  // Update onSaveMarkerLocation callback\n  useEffect(() => {\n    if (ref.current) ref.current.onSaveMarkerLocation = onSaveMarkerLocation;\n  }, [ref.current, onSaveMarkerLocation]);\n\n  return (\n    <mapbox-address-minimap\n      ref={ref}\n      can-adjust-marker={canAdjustMarker}\n      keep-marker-centered={keepMarkerCentered}\n      marker-anchor={markerAnchor}\n      satellite-toggle={satelliteToggle}\n    />\n  );\n}\n", "import { useEffect, useRef } from 'react';\nimport { Evented } from '@mapbox/search-js-core';\n\n/**\n * A React hook to register an event listener on a Search JS Core Evented object.\n *\n * {@link Evented} is a base class that is inherited by {@link SearchSession}.\n */\nexport function useEvented<T, K extends keyof T>(\n  evented: Evented<T> | null,\n  eventName: K,\n  cb: (object: T[K]) => unknown\n): void {\n  const cbRef = useRef(cb);\n  useEffect(() => {\n    cbRef.current = cb;\n  });\n\n  useEffect(() => {\n    if (!evented) return;\n\n    const fn = (object?: T[K]) => cbRef.current(object);\n    evented.addEventListener(eventName, fn);\n\n    return () => {\n      evented.removeEventListener(eventName, fn);\n    };\n  }, [evented, eventName, cbRef]);\n}\n", "import { useEffect, useMemo } from 'react';\nimport { AutofillOptions, MapboxAutofill } from '@mapbox/search-js-core';\n\nconst DEFAULTS = MapboxAutofill.defaults;\n\n/**\n * A React hook that returns a {@link MapboxAutofill} instance.\n *\n * @param {AutofillOptions} options\n * @param {string} options.accessToken\n * @see {@link MapboxAutofill}\n */\nexport function useMapboxAutofill(\n  options: Partial<{ accessToken: string } & AutofillOptions>\n): MapboxAutofill {\n  const autofill = useMemo(() => {\n    return new MapboxAutofill();\n  }, []);\n\n  useEffect(() => {\n    const { accessToken, ...restOptions } = options;\n    autofill.accessToken = accessToken;\n    autofill.defaults = {\n      ...DEFAULTS,\n      ...restOptions\n    };\n  }, [options]);\n\n  return autofill;\n}\n", "import { useEffect, useMemo } from 'react';\nimport { Options, MapboxSearch } from '@mapbox/search-js-core';\n\nconst DEFAULTS = MapboxSearch.defaults;\n\n/**\n * A React hook that returns a {@link MapboxSearch} instance.\n *\n * @param {Options} options\n * @param {string} options.accessToken\n * @see {@link MapboxSearch}\n */\nexport function useMapboxSearch(\n  options: Partial<{ accessToken: string } & Options>\n): MapboxSearch {\n  const search = useMemo(() => {\n    return new MapboxSearch();\n  }, []);\n\n  useEffect(() => {\n    const { accessToken, ...restOptions } = options;\n    search.accessToken = accessToken;\n    search.defaults = {\n      ...DEFAULTS,\n      ...restOptions\n    };\n  }, [options]);\n\n  return search;\n}\n", "import {\n  AutofillOptions,\n  AutofillRetrieveResponse,\n  AutofillSuggestion,\n  AutofillSuggestionResponse,\n  MapboxAutofill,\n  MapboxSearch,\n  Options,\n  RetrieveResponse,\n  SearchSession,\n  Suggestion,\n  SuggestionResponse\n} from '@mapbox/search-js-core';\nimport { useMemo } from 'react';\n\nexport type SearchSessionType = SearchSession<\n  Options,\n  Suggestion,\n  SuggestionResponse,\n  RetrieveResponse\n>;\n\nexport type AutofillSearchSessionType = SearchSession<\n  AutofillOptions,\n  AutofillSuggestion,\n  AutofillSuggestionResponse,\n  AutofillRetrieveResponse\n>;\n\nfunction useSearchSession(search: MapboxSearch): SearchSessionType;\nfunction useSearchSession(autofill: MapboxAutofill): AutofillSearchSessionType;\n\n/**\n * A React hook that returns a {@link SearchSession} instance.\n *\n * @param {MapboxSearch | MapboxAutofill} search\n * @returns {SearchSession}\n * @see {@link SearchSession}\n */\nfunction useSearchSession(\n  search: MapboxSearch | MapboxAutofill\n): SearchSessionType | AutofillSearchSessionType {\n  const searchSession = useMemo(() => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new SearchSession(search as any);\n  }, [search]);\n\n  if (search instanceof MapboxSearch) {\n    return searchSession as SearchSessionType;\n  } else {\n    return searchSession as AutofillSearchSessionType;\n  }\n}\n\nexport { useSearchSession };\n", "import { useMemo, useRef } from 'react';\n\nimport {\n  AddressConfirmOptions,\n  AddressConfirmShowResult,\n  confirmAddress\n} from '@mapbox/search-js-web';\n\ninterface UseConfirmAddressObject {\n  formRef: React.RefObject<HTMLFormElement>;\n  showConfirm: (\n    options?: Partial<AddressConfirmOptions>\n  ) => Promise<AddressConfirmShowResult>;\n}\n\n/**\n * A React hook that returns a form ref and a function to show the address confirmation modal\n *\n * @param {AddressConfirmOptions} optionsArg\n * @see {@link confirmAddress}\n */\nexport function useConfirmAddress(\n  optionsArg: AddressConfirmOptions = {}\n): UseConfirmAddressObject {\n  const formRef = useRef<HTMLFormElement>(null);\n  return useMemo(() => {\n    return {\n      formRef,\n      showConfirm: () => confirmAddress(formRef.current, optionsArg)\n    };\n  }, [formRef, optionsArg]);\n}\n"],
  "mappings": "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",
  "names": []
}
