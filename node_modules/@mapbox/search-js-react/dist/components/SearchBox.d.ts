/// <reference types="mapbox-gl" />
import React from 'react';
import { Options, SuggestionResponse, RetrieveResponse } from '@mapbox/search-js-core';
import { MapboxSearchBox, Theme, PopoverOptions } from '@mapbox/search-js-web';
declare global {
    namespace JSX {
        interface IntrinsicElements {
            'mapbox-search-box': any;
        }
    }
}
/**
 * @typedef SearchBoxRefType
 */
export interface SearchBoxRefType {
    /**
     * @see {@link MapboxSearchBox#focus}
     */
    focus: typeof MapboxSearchBox.prototype.focus;
}
/**
 * @typedef SearchBoxProps
 */
export interface SearchBoxProps {
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     */
    accessToken: string;
    /**
     * Options to pass to the underlying {@link MapboxSearch} interface.
     * @example
     * ```typescript
     * <SearchBox options={{
     *  language: 'en',
     *  country: 'US',
     * }}>
     * ```
     */
    options?: Partial<Options>;
    /**
     * The {@link Theme} to use for styling the search box.
     * @example
     * ```typescript
     * <SearchBox theme={{
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   }
     * }}>
     * ```
     */
    theme?: Theme;
    /**
     * The {@link PopoverOptions} to define popover positioning.
     * @example
     * ```typescript
     * <SearchBox popoverOptions={{
     *   placement: 'top-start',
     *   flip: true,
     *   offset: 5
     * }}>
     * ```
     */
    popoverOptions?: Partial<PopoverOptions>;
    /**
     * If specified, the map will be centered on the retrieved suggestion.
     */
    map?: mapboxgl.Map;
    /**
     * Value to display in the search box.
     */
    value?: string;
    /**
     * Callback for when the value changes.
     */
    onChange?: (value: string) => void;
    /**
     * Fired when the user is typing in the input and provides a list of suggestions.
     * The underlying response from {@link MapboxSearch} is passed.
     */
    onSuggest: (res: SuggestionResponse) => void;
    /**
     * Fired when {@link MapboxSearch} has errored providing a list of suggestions.
     * The underlying error is passed.
     */
    onSuggestError: (error: Error) => void;
    /**
     * Fired when the user has selected a suggestion.
     * The underlying response from {@link MapboxSearch} is passed.
     */
    onRetrieve: (res: RetrieveResponse) => void;
}
/**
 * `<SearchBox>` is a React component that provides an interactive search box,
 * powered by the Mapbox Search API.
 *
 * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).
 *
 * Internally, this wraps the [`<mapbox-search-box>`](https://docs.mapbox.com/mapbox-search-js/api/web/search/#mapboxsearchbox) element.
 *
 * @function SearchBox
 * @param {SearchBoxProps} props
 * @example
 * ```typescript
 * export function Component() {
 *   const [value, setValue] = React.useState('');
 *   return (
 *     <form>
 *       <SearchBox accessToken={<your access token here>} />
 *     </form>
 *   );
 * }
 * ```
 */
export declare const SearchBox: React.ForwardRefExoticComponent<SearchBoxProps & React.RefAttributes<unknown>>;
