import React from 'react';
import { render } from '@testing-library/react';
import { MapboxSearchBox, MapboxHTMLEvent, Theme } from '@mapbox/search-js-web';

import { SearchBox } from '../../src';
import { Options } from '@mapbox/search-js-core';
import { SearchBoxRefType } from '../../src/components/SearchBox';

const OPTIONS: Partial<Options> = { language: 'de' };
const THEME: Theme = { variables: { fontFamily: 'Comic Sans MS ' } };
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const MAP = {} as any;

describe('SearchBox', () => {
  it('renders', () => {
    const handleSuggest = jest.fn();
    const handleSuggestError = jest.fn();
    const handleRetrieve = jest.fn();

    const { baseElement, rerender, unmount } = render(
      <SearchBox
        accessToken="xyz"
        options={OPTIONS}
        theme={THEME}
        onSuggest={handleSuggest}
        onSuggestError={handleSuggestError}
        onRetrieve={handleRetrieve}
        value="hello"
      />
    );

    const search =
      baseElement.querySelector<MapboxSearchBox>('mapbox-search-box');
    expect(search).toBeTruthy();

    expect(search.accessToken).toBe('xyz');
    expect(search.options).toEqual(OPTIONS);
    expect(search.theme).toEqual(THEME);

    search.dispatchEvent(new MapboxHTMLEvent('suggest', { suggestions: [] }));
    expect(handleSuggest).toHaveBeenCalledTimes(1);

    search.dispatchEvent(new MapboxHTMLEvent('suggesterror', new Error('foo')));
    expect(handleSuggestError).toHaveBeenCalledTimes(1);

    search.dispatchEvent(
      new MapboxHTMLEvent('retrieve', {
        suggestions: []
      })
    );
    expect(handleRetrieve).toHaveBeenCalledTimes(1);

    const bindMapFunc = jest.spyOn(search, 'bindMap');
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    bindMapFunc.mockImplementation(() => {});

    const ref = React.createRef<SearchBoxRefType>();
    rerender(
      <SearchBox
        ref={ref}
        accessToken="xyz"
        options={OPTIONS}
        theme={THEME}
        onSuggest={handleSuggest}
        onSuggestError={handleSuggestError}
        onRetrieve={handleRetrieve}
        value="hello"
        map={MAP}
      />
    );

    expect(search.bindMap).toHaveBeenCalled();
    expect(search.bindMap).toHaveBeenCalledWith(MAP);

    expect(ref.current).toBeTruthy();
    jest.spyOn(search, 'focus');
    ref.current.focus();
    expect(search.focus).toHaveBeenCalledTimes(1);

    const oldRef = ref.current;
    unmount();
    expect(oldRef.focus).toThrowError('SearchBox is not mounted');
  });
});
