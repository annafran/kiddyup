import { AutofillFeatureSuggestion, AutofillOptions, AutofillRetrieveResponse, AutofillSuggestion, AutofillSuggestionResponse } from '@mapbox/search-js-core';
import { MapboxSearchListboxCopy } from './MapboxSearchListboxCopy';
import { HTMLScopedElement } from './HTMLScopedElement';
import { Theme } from '../theme';
import { MapboxHTMLEvent } from '../MapboxHTMLEvent';
import { AddressConfirmOptions } from './MapboxAddressConfirmation';
import { PopoverOptions } from '../utils/popover';
export declare type MapboxSearchListboxAutofillType = MapboxSearchListboxCopy<AutofillSuggestion>;
declare type AutofillEventTypes = {
    /**
     * Fired when the user is typing in the input and provides a list of suggestions.
     *
     * The underlying response from {@link MapboxAutofill} is passed as the event's detail.
     *
     * @event suggest
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @type {AutofillSuggestionResponse}
     * @example
     * ```typescript
     * autofill.addEventListener('suggest', (event) => {
     *   const suggestions = event.detail.suggestions;
     *   // ...
     * });
     * ```
     */
    suggest: MapboxHTMLEvent<AutofillSuggestionResponse>;
    /**
     * Fired when {@link MapboxAutofill} has errored providing a list of suggestions.
     *
     * The underlying error is passed as the event's detail.
     *
     * @event suggesterror
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @type {Error}
     * @example
     * ```typescript
     * autofill.addEventListener('suggesterror', (event) => {
     *   const error = event.detail;
     *   // ...
     * });
     * ```
     */
    suggesterror: MapboxHTMLEvent<Error>;
    /**
     * Fired when the user has selected a suggestion, before the form is autofilled.
     *
     * The underlying response from {@link MapboxAutofill} is passed as the event's detail.
     *
     * @event retrieve
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @type {AutofillRetrieveResponse}
     * @example
     * ```typescript
     * autofill.addEventListener('retrieve', (event) => {
     *   const featureCollection = event.detail;
     *   // ...
     * });
     * ```
     */
    retrieve: MapboxHTMLEvent<AutofillRetrieveResponse>;
};
/**
 * `MapboxAddressAutofillCopy`, also available as the element `<mapbox-address-autofill-copy>`,
 * is an element that wraps an address [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text) element with
 * intelligent, location-aware autocomplete functionality.
 *
 * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).
 *
 * This element must be a descendant of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) element, and the form
 * must have inputs with proper HTML `autocomplete` attributes. If your application works with browser autofill, you may already have
 * this functionality.
 * - [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
 * - [Autofill](https://web.dev/learn/forms/autofill/)
 *
 * @class MapboxAddressAutofillCopy
 * @example
 * <form>
 *   <mapbox-address-autofill-copy access-token="<your access token here>">
 *     <input type="text" name="address" autocomplete="shipping street-address" />
 *   </mapbox-address-autofill-copy>
 * </form>
 */
export declare class MapboxAddressAutofillCopy extends HTMLScopedElement<AutofillEventTypes> {
    #private;
    /**
     * This is read by the Web Components API to affect the
     * {@link MapboxAddressAutofillCopy.attributeChangedCallback} below.
     *
     * All of these are passthroughs to the underlying {@link MapboxSearchListbox}.
     *
     * @ignore
     */
    static observedAttributes: string[];
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     *
     * @name accessToken
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @example
     * ```typescript
     * autofill.accessToken = 'pk.my-mapbox-access-token';
     * ```
     */
    get accessToken(): string;
    set accessToken(newToken: string);
    /**
     * The `<input>` element wrapped by the autofill component.
     *
     * @name input
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @type {HTMLInputElement}
     */
    get input(): HTMLInputElement;
    /**
     * Options to pass to the underlying {@link MapboxAutofill} interface.
     *
     * @name options
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @type {AutofillOptions}
     * @example
     * ```typescript
     * autofill.options = {
     *  language: 'en',
     *  country: 'US',
     * };
     * ```
     */
    options: Partial<AutofillOptions>;
    /**
     * The {@link Theme} to use for styling the autofill component.
     *
     * @name theme
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @type {Theme}
     * @example
     * ```typescript
     * autofill.theme = {
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   }
     * };
     * ```
     */
    get theme(): Theme;
    set theme(theme: Theme);
    /**
     * The {@link PopoverOptions} to define popover positioning.
     *
     * @name popoverOptions
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @type {PopoverOptions}
     * @example
     * ```typescript
     * autofill.popoverOptions = {
     *   placement: 'top-start',
     *   flip: true,
     *   offset: 5
     * };
     * ```
     */
    get popoverOptions(): Partial<PopoverOptions>;
    set popoverOptions(newOptions: Partial<PopoverOptions>);
    /**
     * If true, forms autofilled by the browser will prompt the
     * {@link confirmAddress} dialog for user confirmation.
     * An {@link AddressConfirmOptions} object can also be passed
     * to prompt {@link confirmAddress} with custom options.
     * Defaults to false.
     *
     * @name confirmOnBrowserAutofill
     * @instance
     * @memberof MapboxAddressAutofillCopy
     * @type {boolean | AddressConfirmOptions}
     * @example
     * ```typescript
     * autofill.confirmOnBrowserAutofill = {
     *   minimap: true,
     *   skipConfirmModal: (feature) =>
     *     ['exact', 'high'].includes(
     *       feature.properties.match_code.confidence
     *     )
     * };
     * ```
     */
    confirmOnBrowserAutofill: boolean | AddressConfirmOptions;
    retrieveFeature: AutofillFeatureSuggestion;
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /** @section {Methods} */
    /**
     * Focuses the wrapped input element.
     */
    focus(): void;
    /**
     * Trigger side effects from a retrieve event with a simulated result.
     * Used by {@link confirmAddress} when a suggested addresses is accepted.
     *
     * @ignore
     */
    simulateRetrieve(feature: AutofillFeatureSuggestion): void;
}
declare global {
    interface Window {
        MapboxAddressAutofillCopy: typeof MapboxAddressAutofillCopy;
    }
}
export {};
