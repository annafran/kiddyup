import { GeocodeResponse, GeocodeFeature, GeocodeOptions } from '@mapbox/search-js-core';
import mapboxgl from 'mapbox-gl';
import { MapboxSearchListbox } from './MapboxSearchListbox';
import { HTMLScopedElement } from './HTMLScopedElement';
import { Theme } from '../theme';
import { MapboxHTMLEvent } from '../MapboxHTMLEvent';
import { PopoverOptions } from '../utils/popover';
export declare type MapboxSearchListboxGeocodeType = MapboxSearchListbox<GeocodeFeature>;
declare type GeocodeEventTypes = {
    /**
     * Fired when the user is typing and is provided a list of results.
     *
     * The underlying response from {@link MapboxGeocode} is passed as the event's detail.
     *
     * @event results
     * @instance
     * @memberof MapboxGeocoder
     * @type {GeocodeResponse}
     * @example
     * ```typescript
     * geocoder.addEventListener('results', (event) => {
     *   const results = event.detail.results;
     *   // ...
     * });
     * ```
     */
    results: MapboxHTMLEvent<GeocodeResponse>;
    /**
     * Fired when {@link MapboxGeocode} has errored providing a list of results.
     *
     * The underlying error is passed as the event's detail.
     *
     * @event error
     * @instance
     * @memberof MapboxGeocoder
     * @type {Error}
     * @example
     * ```typescript
     * geocoder.addEventListener('error', (event) => {
     *   const error = event.detail;
     *   // ...
     * });
     * ```
     */
    error: MapboxHTMLEvent<Error>;
    /**
     * Fired when the user has selected a result.
     *
     * The underlying response from {@link MapboxGeocde} is passed as the event's detail.
     *
     * @event select
     * @instance
     * @memberof MapboxGeocoder
     * @type {GeocodeFeature}
     * @example
     * ```typescript
     * geocoder.addEventListener('select', (event) => {
     *   const feature = event.detail;
     *   // ...
     * });
     * ```
     */
    select: MapboxHTMLEvent<GeocodeFeature>;
    /**
     * Fired when the user has changed the `<input>` text.
     *
     * The new input value is passed as the event's detail.
     *
     * @event input
     * @instance
     * @memberof MapboxGeocoder
     * @type {string}
     * @example
     * ```typescript
     * geocoder.addEventListener('input', (event) => {
     *   if (e.target !== e.currentTarget) return;
     *   const searchText = event.detail;
     *   // ...
     * });
     * ```
     */
    input: MapboxHTMLEvent<unknown>;
};
/**
 * `MapboxGeocoder`, also available as the element `<mapbox-geocoder>`,
 * is an element that lets you search for places and addresses and their coordinates using
 * the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/).
 *
 * It can control a [Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js/guides/) map
 * to zoom to the selected result.
 *
 * Additionally, `MapboxGeocoder` implements the [IControl](https://www.mapbox.com/mapbox-gl-js/api/markers/#icontrol)
 * interface.
 *
 * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).
 *
 * @class MapboxGeocoder
 * @example
 * ```typescript
 * const geocoder = new MapboxGeocoder();
 * geocoder.accessToken = '<your access token here>';
 * map.addControl(geocoder);
 * ```
 * @example
 * <mapbox-geocoder
 *   access-token="<your access token here>"
 *   proximity="0,0"
 * >
 * </mapbox-geocoder>
 */
export declare class MapboxGeocoder extends HTMLScopedElement<GeocodeEventTypes> implements mapboxgl.IControl {
    #private;
    /**
     * This is read by the Web Components API to affect the
     * {@link MapboxGeocoder#attributeChangedCallback} below.
     *
     * All of these are passthroughs to the underlying {@link MapboxSearchListbox}.
     *
     * @ignore
     */
    static observedAttributes: string[];
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     *
     * @name accessToken
     * @instance
     * @memberof MapboxGeocoder
     * @example
     * ```typescript
     * search.accessToken = 'pk.my-mapbox-access-token';
     * ```
     */
    get accessToken(): string;
    set accessToken(newToken: string);
    /**
     * The value of the input element.
     *
     * @name value
     * @instance
     * @memberof MapboxGeocoder
     * @example
     * ```typescript
     * console.log(geocoder.value);
     * ```
     */
    get value(): string;
    set value(newValue: string);
    protected get template(): HTMLTemplateElement;
    protected get templateStyle(): string;
    protected get templateUserStyle(): string;
    /**
     * Options to pass to the underlying {@link MapboxGeocode} interface.
     *
     * @name options
     * @instance
     * @memberof MapboxGeocoder
     * @type {GeocodeOptions}
     * @example
     * ```typescript
     * search.options = {
     *  language: 'en',
     *  country: 'US',
     * };
     * ```
     */
    options: Partial<GeocodeOptions>;
    /**
     * The {@link Theme} to use for styling the results box and search box.
     *
     * @name theme
     * @instance
     * @memberof MapboxGeocoder
     * @type {Theme}
     * @example
     * ```typescript
     * geocoder.theme = {
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   },
     *   cssText: ".Input:active { opacity: 0.9; }"
     * };
     * ```
     */
    get theme(): Theme;
    set theme(theme: Theme);
    /**
     * The {@link PopoverOptions} to define popover positioning.
     *
     * @name popoverOptions
     * @instance
     * @memberof MapboxGeocoder
     * @type {PopoverOptions}
     * @example
     * ```typescript
     * geocoder.popoverOptions = {
     *   placement: 'top-start',
     *   flip: true,
     *   offset: 5
     * };
     * ```
     */
    get popoverOptions(): Partial<PopoverOptions>;
    set popoverOptions(newOptions: Partial<PopoverOptions>);
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /** @section {Methods} */
    /**
     * Focuses the input element.
     */
    focus(): void;
    /** @section {Map binding} */
    /**
     * Connects the search box to a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map),
     * which handles both setting proximity and zoom after a suggestion click.
     *
     * @example
     * ```typescript
     * const search = new MapboxGeocoder();
     * search.bindMap(map);
     * ```
     */
    bindMap(map: mapboxgl.Map): void;
    /**
     * Unbinds the search box from a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map).
     */
    unbindMap(): void;
    onAdd(map: mapboxgl.Map): HTMLElement;
    onRemove(): void;
    getDefaultPosition(): string;
}
declare global {
    interface Window {
        MapboxGeocoder: typeof MapboxGeocoder;
    }
}
export {};
