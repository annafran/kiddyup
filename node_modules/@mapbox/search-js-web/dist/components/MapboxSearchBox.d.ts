import { Options, RetrieveResponse, Suggestion, SuggestionResponse } from '@mapbox/search-js-core';
import mapboxgl from 'mapbox-gl';
import { MapboxSearchListbox } from './MapboxSearchListbox';
import { HTMLScopedElement } from './HTMLScopedElement';
import { Theme } from '../theme';
import { MapboxHTMLEvent } from '../MapboxHTMLEvent';
import { PopoverOptions } from '../utils/popover';
export declare type MapboxSearchListboxSearchType = MapboxSearchListbox<Options, Suggestion, SuggestionResponse, RetrieveResponse>;
declare type SearchEventTypes = {
    /**
     * Fired when the user is typing and is provided a list of suggestions.
     *
     * The underlying response from {@link MapboxSearch} is passed as the event's detail.
     *
     * @event suggest
     * @instance
     * @memberof MapboxSearchBox
     * @type {SuggestionResponse}
     * @example
     * ```typescript
     * search.addEventListener('suggest', (event) => {
     *   const suggestions = event.detail.suggestions;
     *   // ...
     * });
     * ```
     */
    suggest: MapboxHTMLEvent<SuggestionResponse>;
    /**
     * Fired when {@link MapboxSearch} has errored providing a list of suggestions.
     *
     * The underlying error is passed as the event's detail.
     *
     * @event suggesterror
     * @instance
     * @memberof MapboxSearchBox
     * @type {Error}
     * @example
     * ```typescript
     * search.addEventListener('suggesterror', (event) => {
     *   const error = event.detail;
     *   // ...
     * });
     * ```
     */
    suggesterror: MapboxHTMLEvent<Error>;
    /**
     * Fired when the user has selected a suggestion.
     *
     * The underlying response from {@link MapboxSearch} is passed as the event's detail.
     *
     * @event retrieve
     * @instance
     * @memberof MapboxSearchBox
     * @type {RetrieveResponse}
     * @example
     * ```typescript
     * search.addEventListener('retrieve', (event) => {
     *   const featureCollection = event.detail;
     *   // ...
     * });
     * ```
     */
    retrieve: MapboxHTMLEvent<RetrieveResponse>;
    input: MapboxHTMLEvent<unknown>;
};
/**
 * `MapboxSearchBox`, also available as the element `<mapbox-search-box>`,
 * is an element that lets you search for places, addresses, and landmarks using
 * the [Mapbox Search API](https://docs.mapbox.com/api/search/search).
 *
 * It can control a [Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js/guides/) map
 * to zoom to the selected result.
 *
 * Additionally, `MapboxSearchBox` implements the [IControl](https://www.mapbox.com/mapbox-gl-js/api/markers/#icontrol)
 * interface.
 *
 * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).
 *
 * @class MapboxSearchBox
 * @example
 * ```typescript
 * const search = new MapboxSearchBox();
 * search.accessToken = '<your access token here>';
 * map.addControl(search);
 * ```
 * @example
 * <mapbox-search-box
 *   access-token="<your access token here>"
 *   proximity="0,0"
 * >
 * </mapbox-search-box>
 */
export declare class MapboxSearchBox extends HTMLScopedElement<SearchEventTypes> implements mapboxgl.IControl {
    #private;
    /**
     * This is read by the Web Components API to affect the
     * {@link MapboxSearchBox#attributeChangedCallback} below.
     *
     * All of these are passthroughs to the underlying {@link MapboxSearchListbox}.
     *
     * @ignore
     */
    static observedAttributes: string[];
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     *
     * @name accessToken
     * @instance
     * @memberof MapboxSearchBox
     * @example
     * ```typescript
     * search.accessToken = 'pk.my-mapbox-access-token';
     * ```
     */
    get accessToken(): string;
    set accessToken(newToken: string);
    /**
     * The value of the input element.
     *
     * @name value
     * @instance
     * @memberof MapboxSearchBox
     * @example
     * ```typescript
     * console.log(search.value);
     * ```
     */
    get value(): string;
    set value(newValue: string);
    protected get template(): HTMLTemplateElement;
    protected get templateStyle(): string;
    protected get templateUserStyle(): string;
    /**
     * Options to pass to the underlying {@link MapboxSearch} interface.
     *
     * @name options
     * @instance
     * @memberof MapboxSearchBox
     * @type {Options}
     * @example
     * ```typescript
     * search.options = {
     *  language: 'en',
     *  country: 'US',
     * };
     * ```
     */
    get options(): Partial<Options>;
    set options(newOptions: Partial<Options>);
    /**
     * The {@link Theme} to use for styling the suggestion box and search box.
     *
     * @name theme
     * @instance
     * @memberof MapboxSearchBox
     * @type {Theme}
     * @example
     * ```typescript
     * search.theme = {
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   },
     *   cssText: ".Input:active { opacity: 0.9; }"
     * };
     * ```
     */
    get theme(): Theme;
    set theme(theme: Theme);
    /**
     * The {@link PopoverOptions} to define popover positioning.
     *
     * @name popoverOptions
     * @instance
     * @memberof MapboxSearchBox
     * @type {PopoverOptions}
     * @example
     * ```typescript
     * search.popoverOptions = {
     *   placement: 'top-start',
     *   flip: true,
     *   offset: 5
     * };
     * ```
     */
    get popoverOptions(): Partial<PopoverOptions>;
    set popoverOptions(newOptions: Partial<PopoverOptions>);
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /** @section {Methods} */
    /**
     * Focuses the input element.
     */
    focus(): void;
    /** @section {Map binding} */
    /**
     * Connects the search box to a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map),
     * which handles both setting proximity and zoom after a suggestion click.
     *
     * @example
     * ```typescript
     * const search = new MapboxSearchBox();
     * search.bindMap(map);
     * ```
     */
    bindMap(map: mapboxgl.Map): void;
    /**
     * Unbinds the search box from a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map).
     */
    unbindMap(): void;
    onAdd(map: mapboxgl.Map): HTMLElement;
    onRemove(): void;
    getDefaultPosition(): string;
}
declare global {
    interface Window {
        MapboxSearchBox: typeof MapboxSearchBox;
    }
}
export {};
