import { Suggestion } from '@mapbox/search-js-core';
import mapboxgl from 'mapbox-gl';
import { MapboxSearchListbox } from './MapboxSearchListbox';
import { HTMLScopedElement } from './HTMLScopedElement';
import { Theme } from '../theme';
import { MapboxHTMLEvent } from '../MapboxHTMLEvent';
import { PopoverOptions } from '../utils/popover';
export declare type MapboxSearchListboxSearchType = MapboxSearchListbox<Suggestion>;
declare type SearchEventTypes = {
    input: MapboxHTMLEvent<unknown>;
};
/**
 * `MapboxSearchBoxBase`, also available as the element `<mapbox-search-box>`,
 * is an element that lets you search for places, addresses, and landmarks using
 * the [Mapbox Search API](https://docs.mapbox.com/api/search/search).
 *
 * It can control a [Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js/guides/) map
 * to zoom to the selected result.
 *
 * Additionally, `MapboxSearchBoxBase` implements the [IControl](https://www.mapbox.com/mapbox-gl-js/api/markers/#icontrol)
 * interface.
 *
 * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).
 *
 * @class MapboxSearchBoxBase
 * @example
 * ```typescript
 * const search = new MapboxSearchBoxBase();
 * search.accessToken = '<your access token here>';
 * map.addControl(search);
 * ```
 * @example
 * <mapbox-search-box
 *   access-token="<your access token here>"
 *   proximity="0,0"
 * >
 * </mapbox-search-box>
 */
export declare class MapboxSearchBoxBase extends HTMLScopedElement<SearchEventTypes> implements mapboxgl.IControl {
    #private;
    /**
     * This is read by the Web Components API to affect the
     * {@link MapboxSearchBoxBase#attributeChangedCallback} below.
     *
     * All of these are passthroughs to the underlying {@link MapboxSearchListbox}.
     *
     * @ignore
     */
    static observedAttributes: string[];
    /**
     * The value of the input element.
     *
     * @name value
     * @instance
     * @memberof MapboxSearchBoxBase
     * @example
     * ```typescript
     * console.log(search.value);
     * ```
     */
    get value(): string;
    set value(newValue: string);
    protected get template(): HTMLTemplateElement;
    protected get templateStyle(): string;
    protected get templateUserStyle(): string;
    /**
     * The {@link Theme} to use for styling the suggestion box and search box.
     *
     * @name theme
     * @instance
     * @memberof MapboxSearchBoxBase
     * @type {Theme}
     * @example
     * ```typescript
     * search.theme = {
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   },
     *   cssText: ".Input:active { opacity: 0.9; }"
     * };
     * ```
     */
    get theme(): Theme;
    set theme(theme: Theme);
    /**
     * The {@link PopoverOptions} to define popover positioning.
     *
     * @name popoverOptions
     * @instance
     * @memberof MapboxSearchBoxBase
     * @type {PopoverOptions}
     * @example
     * ```typescript
     * search.popoverOptions = {
     *   placement: 'top-start',
     *   flip: true,
     *   offset: 5
     * };
     * ```
     */
    get popoverOptions(): Partial<PopoverOptions>;
    set popoverOptions(newOptions: Partial<PopoverOptions>);
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /** @section {Methods} */
    /**
     * Focuses the input element.
     */
    focus(): void;
    /** @section {Map binding} */
    /**
     * Connects the search box to a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map),
     * which handles both setting proximity and zoom after a suggestion click.
     *
     * @example
     * ```typescript
     * const search = new MapboxSearchBoxBase();
     * search.bindMap(map);
     * ```
     */
    bindMap(map: mapboxgl.Map): void;
    /**
     * Unbinds the search box from a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map).
     */
    unbindMap(): void;
    onAdd(map: mapboxgl.Map): HTMLElement;
    onRemove(): void;
    getDefaultPosition(): string;
}
declare global {
    interface Window {
        MapboxSearchBoxBase: typeof MapboxSearchBoxBase;
    }
}
export {};
