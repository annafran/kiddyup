import { AutofillOptions, AutofillRetrieveResponse, AutofillSuggestionResponse, Evented, MapboxAutofill } from '@mapbox/search-js-core';
import { MapboxSearchListbox } from './components/MapboxSearchListbox';
import { MapboxHTMLEvent } from './MapboxHTMLEvent';
import { Theme } from './theme';
import { AddressConfirmOptions } from './components/MapboxAddressConfirmation';
import { PopoverOptions } from './utils/popover';
/**
 * @class AutofillInstance
 */
export declare class AutofillInstance {
    #private;
    listbox: MapboxSearchListbox<unknown, import("@mapbox/search-js-core").Suggestion | import("@mapbox/search-js-core").AutofillSuggestion, {
        suggestions: (import("@mapbox/search-js-core").Suggestion | import("@mapbox/search-js-core").AutofillSuggestion)[];
    }, unknown>;
    constructor(collection: AutofillCollectionType, input: HTMLInputElement, autofillRef: MapboxAutofill);
    remove(): void;
}
/**
 * @typedef AutofillCollectionOptions
 */
export interface AutofillCollectionOptions {
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     */
    accessToken?: string;
    /**
     * Options to pass to the underlying {@link MapboxAutofill} interface.
     */
    options?: Partial<AutofillOptions>;
    /**
     * The {@link Theme} to use for styling the autofill component.
     */
    theme?: Theme;
    /**
     * The {@link PopoverOptions} to define popover positioning.
     */
    popoverOptions?: Partial<PopoverOptions>;
    /**
     * If true, forms autofilled by the browser will prompt the
     * {@link confirmAddress} dialog for user confirmation.
     * An {@link AddressConfirmOptions} object can also be passed
     * to prompt {@link confirmAddress} with custom options.
     * Defaults to false.
     */
    confirmOnBrowserAutofill?: boolean | AddressConfirmOptions;
}
interface EventTypes<AutofillSuggestionResponse, AutofillRetrieveResponse> {
    /**
     * Fired when the user is typing in the input and provides a list of suggestions.
     *
     * The underlying response from {@link MapboxAutofill} is passed as the event's detail,
     * while the responsible input is passed as the event's target.
     *
     * @event suggest
     * @instance
     * @memberof AutofillCollection
     * @type {AutofillSuggestionResponse}
     * @example
     * ```typescript
     * collection.addEventListener('suggest', (event) => {
     *   const suggestions = event.detail.suggestions;
     *   const inputEl = event.target;
     *   // ...
     * });
     * ```
     */
    suggest: MapboxHTMLEvent<AutofillSuggestionResponse>;
    /**
     * Fired when {@link MapboxAutofill} has errored providing a list of suggestions.
     *
     * The underlying error is passed as the event's detail,
     * while the responsible input is passed as the event's target.
     *
     * @event suggesterror
     * @instance
     * @memberof AutofillCollection
     * @type {Error}
     * @example
     * ```typescript
     * collection.addEventListener('suggesterror', (event) => {
     *   const error = event.detail;
     *   const inputEl = event.target;
     *   // ...
     * });
     * ```
     */
    suggesterror: MapboxHTMLEvent<Error>;
    /**
     * Fired when the user has selected a suggestion, before the form is autofilled.
     *
     * The underlying response from {@link MapboxAutofill} is passed as the event's detail,
     * while the responsible input is passed as the event's target.
     *
     * @event retrieve
     * @instance
     * @memberof AutofillCollection
     * @type {AutofillRetrieveResponse}
     * @example
     * ```typescript
     * autofill.addEventListener('retrieve', (event) => {
     *   const featureCollection = event.detail;
     *   const inputEl = event.target;
     *   // ...
     * });
     * ```
     */
    retrieve: MapboxHTMLEvent<AutofillRetrieveResponse>;
}
export declare type AutofillCollectionType = AutofillCollection<AutofillSuggestionResponse, AutofillRetrieveResponse>;
/**
 * Underlying collection object class returned by the {@link autofill} function.
 *
 * @class AutofillCollection
 */
export declare class AutofillCollection<AutofillSuggestionResponse, AutofillRetrieveResponse> extends Evented<EventTypes<AutofillSuggestionResponse, AutofillRetrieveResponse>> {
    #private;
    instances: AutofillInstance[];
    constructor({ accessToken, options, theme, popoverOptions, confirmOnBrowserAutofill }: AutofillCollectionOptions);
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     *
     * @example
     * ```typescript
     * autofill.accessToken = 'pk.my-mapbox-access-token';
     * ```
     */
    get accessToken(): string;
    set accessToken(newToken: string);
    /**
     * Options to pass to the underlying {@link MapboxAutofill} interface.
     *
     * @example
     * ```typescript
     * autofill.options = {
     *  language: 'en',
     *  country: 'US',
     * };
     * ```
     */
    get options(): Partial<AutofillOptions>;
    set options(newOptions: Partial<AutofillOptions>);
    /**
     * The {@link Theme} to use for styling the autofill component.
     *
     * @example
     * ```typescript
     * autofill.theme = {
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   }
     * };
     * ```
     */
    get theme(): Theme;
    set theme(newTheme: Theme);
    /**
     * The {@link PopoverOptions} to define popover positioning.
     *
     * @example
     * ```typescript
     * autofill.popoverOptions = {
     *   placement: 'top-start',
     *   flip: true,
     *   offset: 5
     * };
     * ```
     */
    get popoverOptions(): Partial<PopoverOptions>;
    set popoverOptions(newOptions: Partial<PopoverOptions>);
    /**
     * If true, forms autofilled by the browser will prompt the
     * {@link confirmAddress} dialog for user confirmation.
     * An {@link AddressConfirmOptions} object can also be passed
     * to prompt {@link confirmAddress} with custom options.
     * Defaults to false.
     *
     * @name confirmOnBrowserAutofill
     * @instance
     * @memberof AutofillCollection
     * @type {boolean | AddressConfirmOptions}
     * @example
     * ```typescript
     * autofill.confirmOnBrowserAutofill = {
     *   minimap: true,
     *   skipConfirmModal: (feature) =>
     *     ['exact', 'high'].includes(
     *       feature.properties.match_code.confidence
     *     )
     * };
     * ```
     */
    confirmOnBrowserAutofill: boolean | AddressConfirmOptions;
    /** @section {Methods} */
    /**
     * Updates autofill collection based on the current DOM state.
     * @example
     * ```typescript
     * collection.update();
     * ```
     */
    update(): void;
    /**
     * Listen for changes to the DOM, and update autofill instances when autofill-able inputs are added/removed.
     *
     * **IMPORTANT:** For performance reasons, it is recommended to carefully control
     * when this is called and to call {@link AutofillCollection#unobserve} when finished.
     *
     * @example
     * ```typescript
     * collection.observe();
     * ```
     */
    observe(): void;
    /**
     * Stop listening for changes to the DOM. This only has an effect if called
     * after {@link AutofillCollection#observe}.
     *
     * @example
     * ```typescript
     * collection.unobserve();
     * ```
     */
    unobserve(): void;
    /**
     * Removes all autofill instances and listeners in the document.
     *
     * @example
     * ```typescript
     * collection.remove();
     * ```
     */
    remove(): void;
}
/**
 * Entry point for Mapbox Address Autofill, for use on standard HTML input elements.
 *
 * Compared to {@link MapboxAddressAutofill}, this function automatically attaches
 * to eligible [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text) elements in-place.
 *
 * You must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).
 *
 * Eligible inputs must be a descendant of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) element, and the form
 * must have inputs with proper HTML `autocomplete` attributes. The input itself must be of autocomplete `"street-address"` or `"address-line1""`.
 *
 * If your application works with browser autofill, you may already have this functionality.
 * - [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
 * - [Autofill](https://web.dev/learn/forms/autofill/)
 *
 * @param optionsArg - {@link AutofillCollectionOptions} Object defining options for Autofill search behavior and UI.
 * @example
 * <input type="text" autocomplete="street-address" />
 * <script>
 * mapboxsearch.autofill({
 *   accessToken: 'pk.my.token',
 *   options: { country: 'us' }
 * };
 * </script>
 * @example
 * ```typescript
 * const collection = autofill({
 *   accessToken: 'pk.my.token',
 *   options
 * })
 *
 * myClientSideRouter.on('route', () => collection.update());
 * ```
 */
export declare function autofill(optionsArg: AutofillCollectionOptions): AutofillCollectionType;
export {};
