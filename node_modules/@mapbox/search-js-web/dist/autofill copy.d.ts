import { AutofillOptions } from '@mapbox/search-js-core';
import { MapboxAddressAutofill } from './components/MapboxAddressAutofill';
import { Theme } from './theme';
interface AutofillCollectionOptions {
    accessToken: string;
    options?: Partial<AutofillOptions>;
    theme?: Theme;
}
/**
 * @class AutofillCollection
 */
declare class AutofillCollection {
    #private;
    autofillInstances: MapboxAddressAutofill[];
    constructor({ accessToken, options, theme }: AutofillCollectionOptions);
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     *
     * @example
     * ```typescript
     * autofill.accessToken = 'pk.my-mapbox-access-token';
     * ```
     */
    get accessToken(): string;
    set accessToken(newToken: string);
    /**
     * Options to pass to the underlying {@link MapboxAutofill} interface.
     *
     * @example
     * ```typescript
     * autofill.options = {
     *  language: 'en',
     *  country: 'US',
     * };
     * ```
     */
    get options(): Partial<AutofillOptions>;
    set options(newOptions: Partial<AutofillOptions>);
    /**
     * The {@link Theme} to use for styling the autofill component.
     *
     * @example
     * ```typescript
     * autofill.theme = {
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   }
     * };
     * ```
     */
    get theme(): Theme;
    set theme(newTheme: Theme);
    /** @section {Methods} */
    /**
     * Updates autofill collection based on the current DOM state.
     * @example
     * ```typescript
     * collection.update();
     * ```
     */
    update(): void;
    /**
     * Listen for changes to the DOM, and update autofill instances when autofill-able inputs are added/removed.
     *
     * **IMPORTANT:** For performance reasons, it is recommended to carefully control
     * when this is called and to call {@link AutofillCollection#unobserve} when finished.
     */
    observe(): void;
    /**
     * Stop listening for changes to the DOM. This only has an effect if called
     * after {@link AutofillCollection#observe}.
     */
    unobserve(): void;
}
/**
 * Entry point for Mapbox Address Autofill, for use on standard HTML input elements.
 *
 * Compared to {@link MapboxAddressAutofill}, this function automatically attaches
 * to eligible inputs in place.
 *
 * You must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).
 *
 * Eligible inputs must be a descendant of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) element, and the form
 * must have inputs with proper HTML `autocomplete` attributes. The input itself must be of autocomplete `"street-address"` or `"address-line1""`.
 *
 * If your application works with browser autofill, you may already have this functionality.
 * - [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
 * - [Autofill](https://web.dev/learn/forms/autofill/)
 *
 * @param optionsArg
 * @param {string} optionsArg.accessToken
 * @param {Partial<AutofillOptions>} [optionsArg.options]
 * @example
 * <input type="text" autocomplete="street-address" />
 * <script>
 * autofill({
 *   accessToken: 'pk.my.token',
 *   options: {}
 * };
 * </script>
 * @example
 * ```typescript
 * const collection = mapboxsearch.autofill({
 *   accessToken: 'pk.my.token',
 *   options
 * })
 *
 * myClientSideRouter.on('route', () => collection.update());
 * ```
 */
export declare function autofill(optionsArg: AutofillCollectionOptions): AutofillCollection;
export {};
